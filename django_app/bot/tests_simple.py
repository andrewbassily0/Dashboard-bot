"""
ุงุฎุชุจุงุฑุงุช ุจุณูุทุฉ ููุชุฃูุฏ ูู ุนูู ุงููุธุงู
"""
import unittest


class SimpleFlowTests(unittest.TestCase):
    """ุงุฎุชุจุงุฑุงุช ุจุณูุทุฉ ูููู ุงููุธุงู"""
    
    def test_customer_flow_no_price_required(self):
        """ุงุฎุชุจุงุฑ ุฃู ุงูุนููู ูุง ูุญุชุงุฌ ูุฅุฏุฎุงู ุณุนุฑ"""
        # ูุญุงูุงุฉ ุจูุงูุงุช ุงููุทุนุฉ
        item_data = {
            "name": "ููุต ุดุจุงู ุงููุงุตู",
            "description": "",
            "quantity": 1,
            "unit_price": 0,  # ูุง ุณุนุฑ ูู ุงูุนููู
            "currency": "SAR"
        }
        
        # ุงูุชุญูู ูู ุฃู ุงูุณุนุฑ = 0
        self.assertEqual(item_data["unit_price"], 0)
        self.assertEqual(item_data["quantity"], 1)
    
    def test_junkyard_pricing_format(self):
        """ุงุฎุชุจุงุฑ ุชูุณูู ุทูุจ ุงูุชุณุนูุฑ ููุชุดููุญ"""
        expected_format = """
๐ก ูุฑุฌู ุฅุฑุณุงู ุนุฑุถู ููุถุญูุง ุณุนุฑ ูู ูุทุนุฉ ููุฏุฉ ุงูุชูุฑูุฏ:
- ููุต ุดุจุงู ุงููุงุตู: ___ ุฑูุงู
- ููุชุฑ ุฒูุช: ___ ุฑูุงู
- ููุฑ ุดูุทุฉ: ___ ุฑูุงู

โฑ๏ธ ูุฏุฉ ุงูุชูุฑูุฏ ุงููุชููุนุฉ: ___ ููู
        """
        
        # ุงูุชุญูู ูู ูุฌูุฏ ุงูุนูุงุตุฑ ุงููุทููุจุฉ
        self.assertIn("๐ก ูุฑุฌู ุฅุฑุณุงู ุนุฑุถู ููุถุญูุง ุณุนุฑ ูู ูุทุนุฉ", expected_format)
        self.assertIn("โฑ๏ธ ูุฏุฉ ุงูุชูุฑูุฏ ุงููุชููุนุฉ:", expected_format)
        self.assertIn("___ ุฑูุงู", expected_format)
    
    def test_customer_offer_message_format(self):
        """ุงุฎุชุจุงุฑ ุชูุณูู ุฑุณุงูุฉ ุงูุนุฑุถ ููุนููู"""
        expected_format = """
๐ฐ ุนุฑุถ ุฌุฏูุฏ ูุทูุจู!

๐ฆ ุงูุฃุณุนุงุฑ ุงูุชูุตูููุฉ:
- ููุต ุดุจุงู ุงููุงุตู: 200.00 ุฑูุงู
- ููุชุฑ ุฒูุช: 300.00 ุฑูุงู
- ููุฑ ุดูุทุฉ: 150.00 ุฑูุงู
-------------------------
๐ฐ **ุงูุฅุฌูุงูู**: 650.00 ุฑูุงู
        """
        
        # ุงูุชุญูู ูู ูุฌูุฏ ุงูุนูุงุตุฑ ุงููุทููุจุฉ
        self.assertIn("๐ฆ ุงูุฃุณุนุงุฑ ุงูุชูุตูููุฉ:", expected_format)
        self.assertIn("๐ฐ **ุงูุฅุฌูุงูู**:", expected_format)
        self.assertIn("ุฑูุงู", expected_format)
    
    def test_image_upload_cta_format(self):
        """ุงุฎุชุจุงุฑ ุชูุณูู CTA ูุฑูุน ุงูุตูุฑ"""
        expected_format = """
ุนูุฏ ุงูุงูุชูุงุกุ ุงุฎุชุฑ:
โข โ ุฅุถุงูุฉ ูุทุนุฉ ุฌุฏูุฏุฉ
โข ๐ค ุชุฃููุฏ ุงูุทูุจ
        """
        
        # ุงูุชุญูู ูู ูุฌูุฏ CTA
        self.assertIn("โ ุฅุถุงูุฉ ูุทุนุฉ ุฌุฏูุฏุฉ", expected_format)
        self.assertIn("๐ค ุชุฃููุฏ ุงูุทูุจ", expected_format)
    
    def test_offer_total_price_calculation(self):
        """ุงุฎุชุจุงุฑ ุญุณุงุจ ุงูุณุนุฑ ุงูุฅุฌูุงูู"""
        # ูุญุงูุงุฉ ุฃุณุนุงุฑ ุงููุทุน
        item_prices = [200.00, 300.00, 150.00]
        
        # ุญุณุงุจ ุงูุณุนุฑ ุงูุฅุฌูุงูู
        total_price = sum(item_prices)
        
        # ุงูุชุญูู ูู ุงูุญุณุงุจ
        self.assertEqual(total_price, 650.00)
    
    def test_no_price_validation_for_customer(self):
        """ุงุฎุชุจุงุฑ ุนุฏู ูุฌูุฏ ุชุญูู ูู ุงูุณุนุฑ ููุนููู"""
        # ูุญุงูุงุฉ ุจูุงูุงุช ุงูุนููู
        customer_items = [
            {"name": "ููุต ุดุจุงู ุงููุงุตู", "unit_price": 0},
            {"name": "ููุชุฑ ุฒูุช", "unit_price": 0},
            {"name": "ููุฑ ุดูุทุฉ", "unit_price": 0}
        ]
        
        # ุงูุชุญูู ูู ุฃู ุฌููุน ุงููุทุน ูุง ุชุญุชูู ุนูู ุณุนุฑ
        for item in customer_items:
            self.assertEqual(item["unit_price"], 0)
    
    def test_junkyard_per_item_pricing(self):
        """ุงุฎุชุจุงุฑ ุชุณุนูุฑ ุงูุชุดููุญ ููู ูุทุนุฉ ูููุตูุฉ"""
        # ูุญุงูุงุฉ ุฃุณุนุงุฑ ุงูุชุดููุญ
        junkyard_prices = {
            "ููุต ุดุจุงู ุงููุงุตู": 200.00,
            "ููุชุฑ ุฒูุช": 300.00,
            "ููุฑ ุดูุทุฉ": 150.00
        }
        
        # ุงูุชุญูู ูู ูุฌูุฏ ุฃุณุนุงุฑ ููู ูุทุนุฉ
        self.assertEqual(len(junkyard_prices), 3)
        
        # ุงูุชุญูู ูู ุฃู ุงูุฃุณุนุงุฑ ููุฌุจุฉ
        for part, price in junkyard_prices.items():
            self.assertGreater(price, 0)
        
        # ุญุณุงุจ ุงูุณุนุฑ ุงูุฅุฌูุงูู
        total = sum(junkyard_prices.values())
        self.assertEqual(total, 650.00)


if __name__ == '__main__':
    unittest.main()
